field f: Int
field g: Int
predicate P(r: Ref) { acc(r.f) }

// assert fails: wrong wand shape
method m1(x: Ref)
  requires acc(x.f) --* P(x)
{
  assert acc(x.g) --* P(x) 
}

// assert fails: wrong wand args
method m2(x: Ref, y: Ref)
{
  package acc(x.f) --* P(x) {
    fold P(x)
  }
  assert acc(y.f) --* P(x) // Counterexample MUST show that x != y
}

// apply fails: wrong wand shape
method m12(x: Ref)
  requires acc(x.f) --* P(x)
{
  apply acc(x.g) --* P(x) 
}

// apply fails: wrong wand args
method m22(x: Ref, y: Ref)
  requires acc(x.f) --* P(x)
{
  apply acc(y.f) --* P(x) // Counterexample MUST show that x != y
}

// apply fails: left hand side missing
method m3(x: Ref, y: Ref, z: Ref)
  requires acc(x.f) --* P(x)
  requires acc(z.f)
{
  assume x == y
  apply acc(y.f) --* P(x) // Counterexample MUST show that x == y && y != z
}

// wand with no args?
method m4(x: Ref)
  requires true --* true
{
  assert true --* true
  assert false 
}

// package fails b/c of pure constraint (TODO: Check if Silicon/Carbon produce correct values in the CEs; things might not be implemented correctly in the backends)
method m5(x: Ref)
  requires acc(x.f, 1/2)
  requires x.f == 0 || x.f == 3
{
  package acc(x.f, 1/2) --* acc(x.f) && x.f == 3 // CE should show x.f == 0
} 

// package fails b/c of missing permission
method m6(x: Ref, y: Ref, p: Perm)
  requires acc(x.f, 1/3)
  requires acc(y.f, 1/3)
  requires p >= none
  requires acc(x.f, p)
{
  package acc(x.f, 1/3) --* acc(x.f) // CE should show x != y, p < 1/3
} 

// quantified wands
method m7(s: Set[Ref], x: Ref, y: Ref, z: Ref)
  requires forall r: Ref :: r in s ==> (acc(r.f, 1/2) --* P(r))
{
  assume x in s
  assume z in s
  assume x != z
  var yins: Bool := y in s
  assert (acc(x.f, 1/2) --* P(x))
  assert (acc(z.f, 1/2) --* P(z))

  inhale acc(x.f, 1/2)
  apply (acc(x.f, 1/2) --* P(x))
  apply (acc(y.f, 1/2) --* P(y)) // CE should show: x != z, yins = false
                                 // we have the wand acc(z.f, 1/2) --* P(z),
                                 // we do not have the wand acc(x.f, 1/2) --* P(x)
}
