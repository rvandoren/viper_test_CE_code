field left: Int
field right: Int
field next: Ref
field valid: Bool

method simple(x: Ref, y: Ref, z: Ref, r: Int) returns (n: Int)
  requires acc(x.left) && acc(x.right)
  requires acc(y.left) && acc(y.right)
  requires acc(z.next) && acc(z.next.right)
  requires acc(x.valid) && x.valid
  requires r == 155
  requires y.left == 3 && y.right == 4
  requires x.left == 42 && x.right > 52
  requires z.next.right == 12
  //:: ExpectedCounterexample(postcondition.violated:assertion.false, (n == 42))
  ensures  n == 1
{
  n := x.left
  var b: Bool := false
  var s: Int := 99
  label ret
  x.left := 101
  x.right := 201
}

method foo(a: Ref, b: Ref)
  requires acc(a.next) && acc(b.next)
{
  a.next := b
  b.next := a
  //:: ExpectedCounterexample(assert.failed:assertion.false, (a.next.next == a, b == b.next.next))
  assert(false)
}

field f: Int

method client(a: Ref, b: Ref)
  requires acc(a.f) && acc(b.f)
  requires a == b
{
  b.f := a.f
  a.f := 5
  assert a.f == 6
}

method set(x: Ref, i: Int)
  requires acc(x.f) && x.f != i
  ensures  acc(x.f) && x.f == i
{
  x.f := i
}

field f2: Int

method foo2(x: Ref, y: Ref)
  requires acc(x.f2, 1/2) && acc(y.f2, 1/2)
{
  //:: ExpectedCounterexample(assignment.failed:insufficient.permission, (acc(x.f, 1/2)))
  x.f2 := y.f2 * 2 + 2
}